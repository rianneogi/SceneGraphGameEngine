//#version 330 core
 
#ifdef MULTI_TEXTURE
in vec3 UV;
#elif defined(SOLID_COLOR)
in vec3 UV;
#else
in vec2 UV;
#endif
in vec3 fragPos;
in vec3 fragNormal;
 
out vec4 color;
 
#ifdef MULTI_TEXTURE
uniform sampler2DArray textureSampler;
#else
uniform sampler2D textureSampler;
#endif

uniform mat4 gModelMat;
uniform vec3 gEyePos;
uniform struct Light {
	vec3 dir;
	vec3 color;
	float intensity;
} gLight;
 
void main()
{ 
	//Normal = normalize(cross(dFdx(fragPos), dFdy(fragPos)))

    float cosTheta = clamp( dot( fragNormal,-gLight.dir ), 0,1 );
		
	vec3 diffuseVector = vec3(cosTheta,cosTheta,cosTheta);
	
	vec3 vertexPosition_worldspace = (gModelMat*vec4(fragPos,1)).xyz;
	vec3 eyeVector = normalize(gEyePos-vertexPosition_worldspace);
	vec3 reflection = normalize(reflect(gLight.dir,fragNormal));
	float cosAlpha = clamp( dot(eyeVector,reflection), 0,1 );
	//vec3 halfway = normalize(gLight.pos + eyeVector);
	//float cosAlpha = clamp(normalize(dot(fragNormal,halfway)),0,1);
	cosAlpha = pow(cosAlpha,5);
		
	vec3 specularVector = vec3(cosAlpha,cosAlpha,cosAlpha);

	vec3 res = gLight.intensity*gLight.color*(diffuseVector + specularVector);

    #ifdef SOLID_COLOR
    color = vec4(res,1.0)*vec4(UV,1.0);
	#else
	color = vec4(res,1.0)*texture( textureSampler, UV );
	#endif
}