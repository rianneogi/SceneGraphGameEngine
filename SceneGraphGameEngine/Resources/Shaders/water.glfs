#version 330 core
 
in vec4 clipSpace;
in vec2 UV;
in vec3 toCameraVector;

out vec4 color;

uniform float gWaveStrength;
uniform float gWaveHeight;
uniform float gSpecularFactor;
uniform float gShineDamper;
uniform vec3 gLightDir;
uniform float gDuDvOffset;
uniform sampler2D gReflectionTexture;
uniform sampler2D gRefractionTexture;
uniform sampler2D gDuDv;

void main()
{ 
	vec2 ndc = (clipSpace.xy/clipSpace.w)/2.0 + 0.5;
	vec2 distortion = gWaveStrength*(texture(gDuDv, UV+vec2(gDuDvOffset,gDuDvOffset)).xy*2.0 - 1);
	
	vec4 refl = texture(gReflectionTexture,vec2(ndc.x,1-ndc.y)+distortion);
	vec4 refr = texture(gRefractionTexture,ndc+distortion);

	vec3 viewVector = normalize(toCameraVector);

	vec3 normal = normalize(vec3(distortion.x,gWaveHeight,distortion.y));
	vec3 lightVec = normalize(reflect(gLightDir,normal));
	float specular = clamp(dot(viewVector, lightVec),0,1);
	specular = pow(specular, gShineDamper) * gSpecularFactor;

	color = mix(refl, refr, clamp(dot(viewVector, vec3(0,1,0)),0,1)) + vec4(specular, specular, specular, 0.0);

	//color = texture(gDuDv, UV);
}