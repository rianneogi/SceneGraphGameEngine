//#version 330 core
 
#ifdef MULTI_TEXTURE
in vec3 UV;
#elif defined(SOLID_COLOR)
in vec3 UV;
#else
in vec2 UV;
#endif

in vec3 lightDirection_tangentspace;
in vec3 eyeVector_tangentspace;

#ifdef SHADOW_MAP
in vec4 shadowCoord;
#endif
 
out vec4 color;
 
#ifdef MULTI_TEXTURE
uniform sampler2DArray gTexture;
#else
uniform sampler2D gTexture;
#endif

#ifdef SHADOW_MAP
uniform sampler2D gShadowMap;
#endif

#ifdef NORMAL_MAP
uniform sampler2D gNormalMap;
#endif

#ifdef PARALLAX_MAP
uniform sampler2D gDisplacementMap;
#endif

uniform mat4 gModelMat;
uniform vec3 gEyePos;
uniform float gSpecularFactor;
uniform float gShineDamper;
uniform struct Light {
	vec3 dir;
	vec3 color;
	float intensity;
} gLight;
 
void main()
{ 
	//Normal = normalize(cross(dFdx(fragPos), dFdy(fragPos)))

	#ifdef PARALLAX_MAP

	#ifdef MULTI_TEXTURE
	vec3 finalUV = UV + eyeVector_tangentspace.xy * texture(gDisplacementMap, UV).r *  0.1;
	#else
	vec2 finalUV = UV + eyeVector_tangentspace.xy * texture(gDisplacementMap, UV).r *  0.1;
	#endif

	#else

	#ifdef MULTI_TEXTURE
	vec3 finalUV = UV;
	#else
	vec2 finalUV = UV;
	#endif

	#endif

	#ifdef NORMAL_MAP
	vec3 fragNormal = normalize((2.0*texture(gNormalMap, finalUV) - 1.0).rgb);
	#else
	vec3 fragNormal = vec3(0,0,1);
	#endif

    float diffuse = clamp( dot( fragNormal,-lightDirection_tangentspace ), 0,1 );
	
	//vec3 vertexPosition_worldspace = (gModelMat*vec4(fragPos,1)).xyz;
	//vec3 eyeVector = normalize(gEyePos-vertexPosition_worldspace);
	vec3 reflection = normalize(reflect(lightDirection_tangentspace,fragNormal));
	float specular = clamp( dot(eyeVector_tangentspace,reflection), 0,1 );
	//vec3 halfway = normalize(gLight.pos + eyeVector);
	//float cosAlpha = clamp(normalize(dot(fragNormal,halfway)),0,1);
	specular = pow(specular,gShineDamper)*gSpecularFactor;

	float visibility = 1.0;

	#ifdef SHADOW_MAP
	float bias = 0.0035;
	if ( texture( gShadowMap, shadowCoord.xy ).z  <  shadowCoord.z - bias)
	{
		visibility = 0.0;
	}
	#endif

    #ifdef SOLID_COLOR
    color = visibility * gLight.intensity* (vec4(vec3(diffuse),1.0)*vec4(UV,1.0) + vec4(vec3(specular),1.0)*vec4(gLight.color,1.0))
	#else
	color = visibility * gLight.intensity* (vec4(vec3(diffuse),0.0)*texture( gTexture, finalUV ) + vec4(vec3(specular),0.0)*vec4(gLight.color,0.0));
	#endif
	#ifdef SHADOW_MAP
	color = vec4(texture( gShadowMap, UV.xy ).z);
	color = vec4(gl_FragCoord.z/10,gl_FragCoord.z/10,gl_FragCoord.z/10,0);
	#endif
}